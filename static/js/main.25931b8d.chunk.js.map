{"version":3,"sources":["Board.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","state","data","Array","fill","currentOperation","myClick","bind","solvePuzzle","playProbability","handleChange","i","arr","value","index","indexOf","splice","board","countUnsolvedCells","countPlaced","undefined","this","map","col","rowIndex","element","colIndex","isArray","j","startRow","revolver","endRow","startCol","endCol","possibilities","removeItemOnce","length","setState","document","getElementById","style","color","console","log","JSON","stringify","row","ele","foreach","val","event","parseInt","target","forceUpdate","TableContainer","component","Paper","align","Table","className","aria-label","borderStyle","width","tableLayout","TableBody","TableRow","TableCell","padding","Input","id","name","type","inputProps","min","max","textAlign","onChange","Typography","List","message","ListItem","button","ListItemText","primary","Button","variant","onClick","React","Component","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","paddingBottom","content","height","App","classes","Fragment","CssBaseline","Container","maxWidth","AppBar","position","Toolbar","IconButton","edge","menuButton","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.25931b8d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Board.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Input from '@material-ui/core/Input';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nclass Board extends React.Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [Array(9).fill(null),\r\n                Array(9).fill(null),\r\n                Array(9).fill(null),\r\n                Array(9).fill(null),\r\n                Array(9).fill(null),\r\n                Array(9).fill(null),\r\n                Array(9).fill(null),\r\n                Array(9).fill(null),\r\n                Array(9).fill(null)],\r\n    currentOperation: [\"Click Perform to Solve the Puzzle.\"],\r\n    };\r\n\r\n    this.state.data[0][0] = 6;\r\n    this.state.data[0][1] = 5;\r\n    this.state.data[0][3] = 7;\r\n    this.state.data[0][4] = 2;\r\n    this.state.data[1][5] = 6;\r\n    this.state.data[1][7] = 1;\r\n    this.state.data[2][2] = 3;\r\n    this.state.data[2][3] = 5;\r\n    this.state.data[2][5] = 1;\r\n    this.state.data[2][6] = 2;\r\n    this.state.data[2][8] = 7;\r\n    this.state.data[3][2] = 2;\r\n    this.state.data[3][3] = 4;\r\n    this.state.data[3][4] = 3;\r\n    this.state.data[4][0] = 7;\r\n    this.state.data[4][1] = 6;\r\n    this.state.data[4][2] = 8;\r\n    this.state.data[4][6] = 1;\r\n    this.state.data[4][7] = 4;\r\n    this.state.data[4][8] = 3;\r\n    this.state.data[5][4] = 1;\r\n    this.state.data[5][5] = 7;\r\n    this.state.data[5][6] = 5;\r\n    this.state.data[6][0] = 4;\r\n    this.state.data[6][2] = 5;\r\n    this.state.data[6][3] = 1;\r\n    this.state.data[6][5] = 2;\r\n    this.state.data[6][6] = 6;\r\n    this.state.data[7][1] = 8;\r\n    this.state.data[7][3] = 3;\r\n    this.state.data[8][4] = 8;\r\n    this.state.data[8][5] = 5;\r\n    this.state.data[8][7] = 3;\r\n    this.state.data[8][8] = 2;\r\n\r\n    this.myClick = this.myClick.bind(this);\r\n    this.solvePuzzle = this.solvePuzzle.bind(this);\r\n    this.playProbability = this.playProbability.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n\r\nrevolver(i) {\r\nreturn i - (i%3);\r\n}\r\n\r\nremoveItemOnce(arr, value) {\r\n    var index = arr.indexOf(value);\r\n       if (index > -1) {\r\n           arr.splice(index, 1);\r\n       }\r\n       return arr;\r\n}\r\n\r\nsolvePuzzle(data) {\r\n    var countUnsolvedCells = 0;\r\n    var board;\r\n    var countPlaced = 0;\r\n\r\n    if(data === undefined) {\r\n        board = this.state.data;\r\n    }\r\n    board.map((col,rowIndex) =>\r\n        col\r\n        .map((element, colIndex) => {\r\n             if(board[rowIndex][colIndex] === null || Array.isArray(board[rowIndex][colIndex])) {\r\n                //block\r\n                var startRow = this.revolver(rowIndex), endRow = startRow+2, i;\r\n                var startCol = this.revolver(colIndex), endCol = startCol+2, j;\r\n                var possibilities  = board[rowIndex][colIndex] === null ? [1,2,3,4,5,6,7,8,9] : board[rowIndex][colIndex];\r\n\r\n                countUnsolvedCells++;\r\n                for(i=startRow; i<=endRow;i++) {\r\n                    for(j=startCol; j<=endCol;j++) {\r\n                    if(board[i][j] >=1 && board[i][j] <=9 ) {\r\n                            possibilities = this.removeItemOnce(possibilities, board[i][j]);\r\n                        }\r\n                    }\r\n                }\r\n                //row\r\n                for(i=0;i<9;i++) {\r\n                    if(i !== rowIndex && board[i][colIndex] != null && !Array.isArray(board[i][colIndex])) {\r\n                                                possibilities = this.removeItemOnce(possibilities, board[i][colIndex]);\r\n                    }\r\n                }\r\n                //col\r\n                for(j=0;j<9;j++) {\r\n                    if(j !== colIndex && board[rowIndex][j] != null && !Array.isArray(board[rowIndex][j])) {\r\n                                                possibilities = this.removeItemOnce(possibilities, board[rowIndex][j]);\r\n                    }\r\n                }\r\n                if(possibilities.length === 1) {\r\n                    board[rowIndex][colIndex] = possibilities[0];\r\n                    countPlaced++;\r\n                    this.setState({currentOperation:\r\n                        [ ...this.state.currentOperation,\r\n                            \"setting value at:[\"+rowIndex+\"][\"+colIndex+\"] to \" + board[rowIndex][colIndex]]});\r\n                    document.getElementById('basic_'+rowIndex+'_'+colIndex).style.color = \"green\";\r\n                } else if(possibilities.length > 0) {\r\n                    board[rowIndex][colIndex] = possibilities;\r\n                }\r\n             }\r\n        })\r\n    )\r\n\r\n    if (data === undefined) {\r\n        if (countPlaced === 0 && countUnsolvedCells > 0) {\r\n            this.playProbability();\r\n            this.solvePuzzle();\r\n        } else if (countUnsolvedCells > 0) {\r\n            this.solvePuzzle();\r\n        }\r\n        this.setState({data: board});\r\n    } else {\r\n        if (countPlaced === 0 && countUnsolvedCells > 0) {\r\n            this.playProbability(data);\r\n            this.solvePuzzle(data);\r\n        } else if (countUnsolvedCells > 0) {\r\n            this.solvePuzzle(data);\r\n        } else if (countUnsolvedCells === 0) {\r\n            this.setState({data: board});\r\n        }\r\n\r\n    }\r\n\r\n    console.log(JSON.stringify(board));\r\n}\r\n\r\nplayProbability(data) {\r\nvar board;\r\nvar possibilities = [1,2,3,4,5,6,7,8,9];\r\nvar row, col;\r\n\r\nif(data === undefined) {\r\n        board = this.state.data;\r\n    }\r\n\r\nboard.map((row, rowIndex) => {\r\n    row.map((ele, colIndex)=>{\r\n        if(Array.isArray(board[rowIndex][colIndex]) && board[rowIndex][colIndex].length < possibilities.length) {\r\n            possibilities = board[rowIndex][colIndex];\r\n            row = rowIndex;\r\n            col = colIndex;\r\n        }\r\n    })\r\n})\r\n\r\npossibilities.foreach(function(val) {\r\n    var data = [...board];\r\n    data[row][col] = val;\r\n    this.solvePuzzle(data);\r\n}, this);\r\n\r\n}\r\n\r\nmyClick() {\r\nthis.solvePuzzle();\r\n}\r\n\r\nhandleChange(rowIndex, colIndex, event) {\r\n    this.state.data[rowIndex][colIndex] = parseInt(event.target.value);\r\n    this.forceUpdate();\r\n    /*var newValue = event.target.value;\r\n    this.setState(({ data }) => ({ data:\r\n      data.map((row, i) => {\r\n        row.map((tile, j) => {\r\n          if (i === rowIndex && j === colIndex) {\r\n          var parsed = parseInt(newValue);\r\n            return parsed === Number.NAN? null: parsed ;\r\n          } else {\r\n            return tile;\r\n          }\r\n        })\r\n      })\r\n    }));*/\r\n\r\n}\r\n\r\nrender() {\r\n  return (\r\n             <TableContainer component={Paper} align=\"center\">\r\n             <Table className=\"puzzle-table\" aria-label=\"a dense table\" style={{ borderStyle: 'solid', width: \"auto\", tableLayout: \"auto\" }}>\r\n             <TableBody>\r\n            {\r\n                this.state.data.map((row, rowIndex) => (\r\n                <TableRow>\r\n                {\r\n                    row.map((element, colIndex) => (\r\n                            <TableCell padding=\"none\" align=\"center\" borderStyle=\"solid\">\r\n                            <Input id={\"basic_\"+rowIndex+\"_\"+colIndex} name={\"data[\"+rowIndex+\"][\"+colIndex+\"]\"} type=\"number\"\r\n                                    inputProps={{min: 1, max:9, style: { textAlign: \"center\" }}} align=\"center\"\r\n                                    onChange={ this.handleChange.bind(this, rowIndex,colIndex) }\r\n                                    value={this.state.data[rowIndex][colIndex]} />\r\n\r\n                            </TableCell>\r\n\r\n                    ))\r\n                }\r\n                </TableRow>\r\n                ))\r\n            }\r\n            </TableBody>\r\n            </Table>\r\n            <Typography component=\"div\" align=\"right\">\r\n                <Typography component=\"div\" align=\"center\">\r\n                    <List component=\"nav\" aria-label=\"main transactions list\">\r\n\r\n                    {this.state.currentOperation.map((message) =>\r\n                            <ListItem button>\r\n                                <ListItemText primary={message} />\r\n                            </ListItem>\r\n                    )}\r\n                    </List>\r\n                </Typography>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.myClick}>\r\n                  Perform\r\n                </Button>\r\n            </Typography>\r\n        </TableContainer>\r\n  );\r\n  }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport './App.css';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Board from './Board';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: '#cfe8fc',\r\n    paddingBottom: 50,\r\n  },\r\n  content: {\r\n    height: '100vh',\r\n  }\r\n}));\r\n\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  return (\r\n        <React.Fragment>\r\n              <CssBaseline />\r\n              <Container maxWidth=\"lg\" >\r\n                <Typography component=\"div\" className={classes.root} >\r\n                              <AppBar position=\"static\">\r\n                                <Toolbar variant=\"dense\">\r\n                                  <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                                    <MenuIcon />\r\n                                  </IconButton>\r\n                                  <Typography variant=\"h6\" color=\"inherit\">\r\n                                    Sudoku Solver\r\n                                  </Typography>\r\n                                </Toolbar>\r\n                              </AppBar>\r\n                </Typography>\r\n                <Paper className={classes.content}>\r\n                <Board />\r\n                </Paper>\r\n              </Container>\r\n         </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}